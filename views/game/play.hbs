{{#extend 'layouts/default'}}

    {{#replace 'navLeft'}}
        <li>
            <span class="navbar-title" data-bind="text: game().name">Loading...</span>
        </li>

        <!-- ko if: isHost() -->
        {{!--
        <li>
            <a href="#" data-toggle="modal" data-target="#game-settings-modal">
                <span class="glyphicon glyphicon-wrench"></span>
                Settings
            </a>
        </li>
        --}}

        <li>
            <a href="#" data-toggle="modal" data-target="#game-players-modal">
                <span class="glyphicon glyphicon-user"></span>
                Players
            </a>
        </li>
        <!-- /ko -->
    {{/replace}}

    {{#prepend 'navRight'}}
        <!-- ko if: game().roundTimeLimit -->
        <li>
            <p class="navbar-text">
                Time left:
                <span data-bind="text: timeLeft"></span>s
                <!-- ko if: isHost() -->
                <button class="btn btn-xs btn-success skip-button" data-bind="enable: timeLeft() > 0, click: skipRound">
                    <span class="glyphicon glyphicon-fast-forward"></span>
                    Skip
                </button>
                <!-- /ko -->
            </p>
        </li>
        <!-- /ko -->

        <li>
            <a href="#" onclick="leaveGame()" title="Leave game">
                <span class="glyphicon glyphicon-remove"></span>
                Leave game
            </a>
        </li>
    {{/prepend}}

    {{#replace 'logoutOnclick'}}
        interruptListen()
    {{/replace}}

    {{#replace 'content'}}

        {{> modalGameSettings}}
        {{> modalGamePlayers}}

        <!-- ko if: !ended() -->
        <div id="cards-table">
            <div class="card black-card">
                <!-- ko if: blackCard -->
                <span data-bind="html: blackCard().text"></span>

                {{> watermarkIcon}}
                <div class="watermark" data-bind="text: blackCard().watermark"></div>
                <!-- /ko -->

                <!-- ko if: !blackCard() -->
                {{ajaxLoaderDark}}
                <!-- /ko -->
            </div>

            <!-- ko foreach: playedCards -->
            <div class="move"
                 data-bind="foreach: cards, click: function () { if (model.isCzar() && !model.selectedMoveSubmitted() && model.czarCanSelect()) { model.selectedMove($data) } }">

                <div class="card white-card played-card"
                     data-bind="css: { 'card-selected': model.selectedMove() == $parent }">
                    <span data-bind="html: text"></span>

                    {{> watermarkIcon}}
                    <div class="watermark" data-bind="text: watermark"></div>
                </div>
            </div>
            <!-- /ko -->
        </div>

        <div class="clearfix"></div>

        <!-- ko if: isCzar() && blackCard() && czarCanSelect() -->
        <div class="confirm" data-bind="">
            <button class="btn btn-primary"
                    data-bind="enable: selectedMove() && !selectedMoveSubmitted(), click: submitSelectedMove">
                Confirm
            </button>

            <!-- ko if: !selectedMove() -->
            Select the card<span data-bind="if: blackCard().pick > 1">s</span> you like the most.
            <!-- /ko -->
        </div>
        <!-- /ko -->

        <!-- ko if: !isCzar() && blackCard() && move() && !playedCardsUncovered() -->
        <div class="confirm" data-bind="">
            <button class="btn btn-primary"
                    data-bind="enable: move().cards().length == blackCard().pick && !move().confirmed(), click: move().submit">
                Confirm
            </button>

            <!-- ko if: move().cards().length < blackCard().pick -->
            <!-- ko if: blackCard().pick > 1 -->
            Select <span data-bind="text: blackCard().pick"></span> cards in the order you would like to play them.
            <!-- /ko -->
            <!-- ko if: blackCard().pick <= 1 -->
            Select a card to play.
            <!-- /ko -->
            <!-- /ko -->
        </div>
        <!-- /ko -->

        <div id="hand" data-bind="foreach: hand.cards">
            <div class="card-small white-card"
                 data-bind="click: function () { if (model.move() && !$parent.playedCardsUncovered()) { model.move().select($data) } }, css: { 'card-selected': model.move() && _.contains(model.move().cards(), $data) }">
                <span data-bind="html: text"></span>

                {{> watermarkIcon}}
                <div class="watermark" data-bind="text: watermark"></div>

                <!-- ko if: model.move() && model.move().selectionIndex($data) && $parent.blackCard() && $parent.blackCard().pick > 1 -->
                <span class="selected-index">
                    <span data-bind="text: model.move().selectionIndex($data)"></span>
                </span>
                <!-- /ko -->
            </div>
        </div>
        <!-- /ko -->

        <!-- ko if: ended -->
        <div class="text-center">
            <h4>Game ended</h4>

            <p>
                <strong>Winner:</strong> <span data-bind="text: winner().name"></span>
            </p>

            <!--ko if: $root.isHost() -->
            <p>
                <button data-bind="click: resetGame">
                    Start a new game
                </button>
            </p>
            <!-- /ko -->

            <br/>
        </div>
        <!-- /ko -->

        <!-- ko if: players().length < 3 -->
        <div class="text-center">
            <h4>Game ended</h4>

            <p>(Not enough players)</p>
        </div>
        <!-- /ko -->

        <div class="row">
            <div id="scoreboard">
                <h4>
                    Scoreboard (to <span data-bind="text: game().scoreLimit"></span>)
                    <span class="pull-right">
                        Round <span data-bind="text: round"></span>
                    </span>

                    <!-- ko if: isHost() -->
                    <small>
                        <a href="#" data-toggle="modal" data-target="#game-players-modal">
                            Manage bans
                        </a>
                    </small>
                    <!-- /ko -->
                </h4>

                <!-- ko foreach: players -->
                <div class="player">
                    <div class="row">
                        <div class="col-xs-12">
                            <strong data-bind="text: name"></strong>
                            <span title="Host" class="glyphicon glyphicon-star"
                                  data-bind="visible: $root.game().host.id == id"></span>
                            <!-- ko if: $root.isHost() && $root.game().host.id != id  -->
                            <div class="pull-right">
                                <button class="btn btn-xs btn-default" data-bind="click: $root.kick">
                                    Kick
                                </button>
                                <button class="btn btn-xs btn-danger" data-bind="click: $root.ban">
                                    Ban
                                </button>
                            </div>
                            <!-- /ko -->
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-7">
                            <span data-bind="text: points"></span> Awesome Point<span
                                data-bind="if: points() != 1">s</span>
                        </div>
                        <div class="col-xs-5 text-right">
                            <span data-bind="text: state"></span>
                        </div>
                    </div>
                </div>
                <!-- /ko -->
            </div>

            <div id="chats" class="chat-wrapper">
                <ul id="chat">
                    <li>
                        <a href="#chat-global" data-toggle="tab">Global Chat</a>
                    </li>

                    <li class="active">
                        <a href="#chat-game" data-toggle="tab">Game Chat</a>
                    </li>
                </ul>

                <div class="tab-content">
                    <div class="tab-pane" id="chat-global">
                        {{>globalChat}}
                    </div>

                    <div class="tab-pane active" id="chat-game">
                        <ul class="history" data-bind="foreach: chat().history">
                            {{>chatMessage}}
                        </ul>

                        <div class="input">
                            <div class="input-group">
                                <input type="text" autocomplete="false" class="form-control"
                                       data-bind="value: chat().message, valueUpdate: 'afterkeydown', returnAction: chat().send">

                                <span class="input-group-btn">
                                    <button type="button" class="btn btn-default" data-bind="click: chat().send">
                                        Send
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script type="text/html" id="template-black-card">
            <div class="card black-card">
                <span data-bind="html: blackCard().text"></span>

                {{> watermarkIcon}}
                <div class="watermark" data-bind="text: blackCard().watermark"></div>
            </div>
        </script>

        <script type="text/html" id="template-white-card">
            <div class="card white-card">
                <span data-bind="html: text"></span>

                {{> watermarkIcon}}
                <div class="watermark" data-bind="text: watermark"></div>
            </div>
        </script>
    {{/replace}}

    {{#append 'defer'}}
        <script>
            currentListenRequest = null;

            function listen() {
                currentListenRequest = $.ajax('/ajax/game/{{{game.id}}}/listen', {
                            success: function (data) {
                                _.each(data, function (update) {
                                    model.handleUpdate(update);
                                });
                                $.material.ripples();
                                setTimeout(listen, 500);
                            },
                            error: function (xhr, status, error) {
                                if (error == 'abort') {
                                    return;
                                }

                                console.warn('listen request failed: ' + status + ': ' + error);

                                if (error == 'Forbidden') {
                                    window.location.reload(true);
                                    return;
                                } else if (error == 'Not Found') {
                                    window.location.href = '/games';
                                    return;
                                }

                                model.chat().showError('Failed to fetch game updates! Trying again in 5 seconds.');
                                setTimeout(listen, 5000);
                            }
                        }
                );
            }

            function interruptListen() {
                if (currentListenRequest) {
                    currentListenRequest.abort();
                    console.log('Interrupted update listener');
                }

                interruptChatListen();
            }

            function leaveGame() {
                interruptListen();

                $.ajax('/ajax/game/{{{game.id}}}/leave', {
                    method: 'post',
                    complete: function () {
                        window.location = '/';
                    }
                });
            }

            $(function () {
                $.ajaxSetup({cache: false});

                $(window).bind('beforeunload', function () {
                    interruptListen();
                });

                $.blockUI.defaults.message = 'You are the card czar.';
                $.blockUI.defaults.css.border = 'none';
                $.blockUI.defaults.css.padding = 10;
                $.blockUI.defaults.css.cursor = 'default';
                $.blockUI.defaults.overlayCSS.cursor = 'default';

                $('#chat').find('a').click(function (e) {
                    e.preventDefault();
                    $(this).tab('show');
                });

                var $globalChat = $('#chat-global');
                initChat({{{userJson}}}, $globalChat.find('> .history'), $globalChat.find('input[type="text"]'));

                model = new PlayViewModel({{{gameJson}}}, {{{userJson}}});
                ko.applyBindings(model);

                if (model.isHost()) {
                    model.loadBans();
                }

                $gameChat = $('#chat-game');
                model.chat().inputElement($gameChat.find('input[type="text"]'));
                model.chat().historyElement($gameChat.find('> .history'));

                var blockHandCzar = function () {
                    if (model.isCzar()) {
                        $('#hand').block();
                    } else {
                        $('#hand').unblock();
                    }
                };
                model.hand.cards.subscribe(blockHandCzar);
                model.isCzar.subscribe(blockHandCzar);

                var blackHandIgnored = function () {
                    if (model.ignored()) {
                        $('#hand').block({message: 'Waiting...'})
                    } else if (!model.isCzar()) {
                        $('#hand').unblock();
                    }
                };
                model.ignored.subscribe(blackHandIgnored);

                listen();

                var getState = function () {
                    $.ajax('/ajax/game/{{{game.id}}}/state', {
                        method: 'post',
                        error: function (request, error, status) {
                            console.warn('Failed to request state: ' + error + ': ' + status);
                            model.chat().showError('Failed to request game state! Trying again in 5 seconds.');
                            setTimeout(getState, 5000);
                        }
                    });
                };

                // give the listen call some time, otherwise the server will send the state to the previous and now invalid request
                setTimeout(getState, 1000);
            });
        </script>
    {{/append}}

    {{#replace 'globalChat'}}{{/replace}}
    {{#replace 'initGlobalChat'}}{{/replace}}

{{/extend}}
